{"ast":null,"code":"import _slicedToArray from \"C:/Users/mekia/Documents/GitHub/Nursing VR Website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: selectedOptions.map(function (o) {\n      return o.label;\n    }).join(', ')\n  });\n}\n\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n\n  if (selectedOptions.every(function (o) {\n    return typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean';\n  })) {\n    return selectedOptions.map(function (o) {\n      return String(o.value);\n    });\n  }\n\n  return JSON.stringify(selectedOptions.map(function (o) {\n    return o.value;\n  }));\n}\n\nfunction useUtilityClasses(ownerState) {\n  var active = ownerState.active,\n      disabled = ownerState.disabled,\n      open = ownerState.open,\n      focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\n\n\nvar MultiSelectUnstyled = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n\n  var autoFocus = props.autoFocus,\n      children = props.children,\n      component = props.component,\n      _props$defaultListbox = props.defaultListboxOpen,\n      defaultListboxOpen = _props$defaultListbox === void 0 ? false : _props$defaultListbox,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,\n      disabledProp = props.disabled,\n      _props$getSerializedV = props.getSerializedValue,\n      getSerializedValue = _props$getSerializedV === void 0 ? defaultFormValueProvider : _props$getSerializedV,\n      listboxId = props.listboxId,\n      listboxOpenProp = props.listboxOpen,\n      name = props.name,\n      onChange = props.onChange,\n      onListboxOpenChange = props.onListboxOpenChange,\n      _props$optionStringif = props.optionStringifier,\n      optionStringifier = _props$optionStringif === void 0 ? defaultOptionStringifier : _props$optionStringif,\n      renderValueProp = props.renderValue,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      valueProp = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      groupedOptions = _React$useState2[0],\n      setGroupedOptions = _React$useState2[1];\n\n  var options = React.useMemo(function () {\n    return flattenOptionGroups(groupedOptions);\n  }, [groupedOptions]);\n\n  var _useControlled = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      listboxOpen = _useControlled2[0],\n      setListboxOpen = _useControlled2[1];\n\n  React.useEffect(function () {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buttonDefined = _React$useState4[0],\n      setButtonDefined = _React$useState4[1];\n\n  var buttonRef = React.useRef(null);\n  var listboxRef = React.useRef(null);\n  var Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  var ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  var Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  var handleButtonRefChange = React.useCallback(function (element) {\n    setButtonDefined(element != null);\n  }, []);\n  var handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(function () {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  var handleOpenChange = React.useCallback(function (isOpen) {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  }, [setListboxOpen, onListboxOpenChange]);\n\n  var _useSelect = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue: defaultValue,\n    disabled: disabledProp,\n    listboxId: listboxId,\n    multiple: true,\n    onChange: onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options: options,\n    optionStringifier: optionStringifier,\n    value: valueProp\n  }),\n      buttonActive = _useSelect.buttonActive,\n      buttonFocusVisible = _useSelect.buttonFocusVisible,\n      contextValue = _useSelect.contextValue,\n      disabled = _useSelect.disabled,\n      getButtonProps = _useSelect.getButtonProps,\n      getListboxProps = _useSelect.getListboxProps,\n      value = _useSelect.value;\n\n  var ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen: defaultListboxOpen,\n    disabled: disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue: renderValue,\n    value: value\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var selectedOptions = React.useMemo(function () {\n    if (value == null) {\n      return [];\n    }\n\n    return options.filter(function (o) {\n      return value.includes(o.value);\n    });\n  }, [options, value]);\n  var buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState: ownerState,\n    className: classes.listbox\n  });\n  var popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState: ownerState,\n    className: classes.popper\n  });\n  var context = React.useMemo(function () {\n    return _extends({}, contextValue, {\n      listboxRef: listboxRef\n    });\n  }, [contextValue]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOptions)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the MultiSelect.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the MultiSelect.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useForkRef","useForkRef","unstable_useControlled","useControlled","flattenOptionGroups","getOptionsFromChildren","useSelect","useSlotProps","PopperUnstyled","SelectUnstyledContext","composeClasses","getSelectUnstyledUtilityClass","defaultOptionStringifier","jsx","_jsx","jsxs","_jsxs","defaultRenderMultipleValues","selectedOptions","Fragment","children","map","o","label","join","defaultFormValueProvider","length","every","value","String","JSON","stringify","useUtilityClasses","ownerState","active","disabled","open","focusVisible","slots","root","listbox","popper","MultiSelectUnstyled","forwardRef","props","forwardedRef","_ref","_slots$listbox","_slots$popper","autoFocus","component","defaultListboxOpen","defaultValue","disabledProp","getSerializedValue","listboxId","listboxOpenProp","listboxOpen","name","onChange","onListboxOpenChange","optionStringifier","renderValueProp","renderValue","slotProps","valueProp","other","useState","groupedOptions","setGroupedOptions","options","useMemo","controlled","default","state","setListboxOpen","useEffect","buttonDefined","setButtonDefined","buttonRef","useRef","listboxRef","Button","ListboxRoot","Popper","handleButtonRefChange","useCallback","element","handleButtonRef","current","focus","handleOpenChange","isOpen","multiple","onOpenChange","buttonActive","buttonFocusVisible","contextValue","getButtonProps","getListboxProps","classes","filter","includes","buttonProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","listboxProps","additionalProps","ref","popperProps","anchorEl","disablePortal","placement","role","undefined","context","Provider","type","process","env","NODE_ENV","propTypes","bool","node","array","func","string","shape","oneOfType","object"],"sources":["C:/Users/mekia/Documents/GitHub/Nursing VR Website/node_modules/@mui/base/MultiSelectUnstyled/MultiSelectUnstyled.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: selectedOptions.map(o => o.label).join(', ')\n  });\n}\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n  if (selectedOptions.every(o => typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean')) {\n    return selectedOptions.map(o => String(o.value));\n  }\n  return JSON.stringify(selectedOptions.map(o => o.value));\n}\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\nconst MultiSelectUnstyled = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n  const {\n      autoFocus,\n      children,\n      component,\n      defaultListboxOpen = false,\n      defaultValue = [],\n      disabled: disabledProp,\n      getSerializedValue = defaultFormValueProvider,\n      listboxId,\n      listboxOpen: listboxOpenProp,\n      name,\n      onChange,\n      onListboxOpenChange,\n      optionStringifier = defaultOptionStringifier,\n      renderValue: renderValueProp,\n      slotProps = {},\n      slots = {},\n      value: valueProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const handleOpenChange = React.useCallback(isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  }, [setListboxOpen, onListboxOpenChange]);\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    contextValue,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    value\n  } = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple: true,\n    onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options,\n    optionStringifier,\n    value: valueProp\n  });\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue,\n    value\n  });\n  const classes = useUtilityClasses(ownerState);\n  const selectedOptions = React.useMemo(() => {\n    if (value == null) {\n      return [];\n    }\n    return options.filter(o => value.includes(o.value));\n  }, [options, value]);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popper\n  });\n  const context = React.useMemo(() => _extends({}, contextValue, {\n    listboxRef\n  }), [contextValue]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOptions)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n  /**\n   * The props used for each slot inside the MultiSelect.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the MultiSelect.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;"],"mappings":"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"},"metadata":{},"sourceType":"module"}